version: 2.1
jobs:
  build:
    working_directory: /core-builds
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.1-alpine
    steps:
      - checkout
      - run: dotnet publish Zilon.Core/Zilon.Core/Zilon.Core.csproj -c Release -f netstandard2.0 -o ../../bin
      - run: dotnet publish Zilon.Core/Zilon.Bot.Players/Zilon.Bot.Players.csproj -c Release -f netstandard2.0 -o ../../bin
      - persist_to_workspace:
          root: bin
          paths:
            - ./*
  sonar-scan:
    working_directory: /sonar-analysis
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.1
    steps:
      - checkout
      - run: |
          wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -
          apt-get update
          apt-get install -y software-properties-common
          apt-get install -y apt-transport-https
          add-apt-repository --yes https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/
          apt-get update
          apt-get install -y adoptopenjdk-13-hotspot
      - run: |
          dotnet tool install --global dotnet-sonarscanner
          echo 'export PATH="$PATH:/root/.dotnet/tools"' >> $BASH_ENV
      - sonarcloud/run-scan:
          project_key: kreghek_Zilon_Roguelike
          organization: kreghek
          pull_request_base: master
      - run: dotnet build Zilon.Core/Zilon.Core.SonarScanner.sln -c Release
      - sonarcloud/end-scan
  test_45:
    working_directory: /test45
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-alpine
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: /test45/Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: dotnet test Zilon.Core/Zilon.Core.Tests/Zilon.Core.Tests.csproj -c Release -r ./Results
      - store_test_results:
          path: ./Results/Zilon.Core.Tests.xml
  test_di:
    working_directory: /test_di
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-alpine
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: /test_di/Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: dotnet test Zilon.Core/Zilon.Core.DiTests/Zilon.Core.DiTests.csproj -c Release -r ./Results
      - store_test_results:
          path: ./Results/Zilon.Core.DiTests.xml
  test_45_coverage:
    working_directory: /test_45_coverage
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-alpine
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: ./Zilon.Client/Assets/Resources/Schemes
      CODACY_COVERAGE_VERSION: 1.0.3
    steps:
      - checkout
      # Это ссылка, как теперь должен выполняться расчёт покрытия
      # https://www.jetbrains.com/help/dotcover/Running_Coverage_Analysis_from_the_Command_LIne.html?_ga=2.27276607.2096227310.1581888340-63235865.1580829125&_gac=1.251614836.1581888340.Cj0KCQiA7aPyBRChARIsAJfWCgItffmow2clMuBcwoVrQIbug9HBH9iuYf9D_spWlORxsQA8fLxv8f0aAlffEALw_wcB#
      # https://github.com/codacy/csharp-codacy-coverage
      # Сейчас в нерабочем состоянии, поэтому отключено.
      # Дополнительно, не работает сохранение результатов прогона тестов.
      - run: cd /test_45_coverage/Zilon.Core/Zilon.Core.Tests
      - run: dotnet restore
      - run: dotnet dotcover test -c Release -r /test_45_coverage/Zilon.Core.Report.xml --dcReportType=DetailedXML --dcScope="/test_45_coverage/Zilon.Core/Zilon.Core/bin/Debug/Zilon.Core.dll" --dcLogFile=/dev/stdout
      - store_artifacts:
          path: /test_45_coverage/Zilon.Core.Report.xml
      - run: curl -Ls https://github.com/codacy/csharp-codacy-coverage/releases/download/$CODACY_COVERAGE_VERSION/Codacy.CSharpCoverage_linux-x64 --output Codacy.CSharpCoverage_linux-x64
      - run: chmod +x ./Codacy.CSharpCoverage_linux-x64
      - run: ./Codacy.CSharpCoverage_linux-x64 -c $CIRCLE_SHA1 -t $CODACY_PROJECT_TOKEN -r /test_45_coverage/Zilon.Core.Report.xml -e dotcover
  test_players:
    working_directory: /test_players
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-alpine
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: /test_players/Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: dotnet test Zilon.Core/Zilon.Bot.Players.Tests/Zilon.Bot.Players.Tests.csproj -c Release -r ./Results
  test_bots:
    working_directory: /test_bots
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-alpine
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: /test_bots/Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: dotnet test Zilon.Core/Zilon.Bot.Players.DevelopmentTests/Zilon.Bot.Players.DevelopmentTests.csproj -c Release -r ./Results
  test_specflow:
    working_directory: /test_specflow
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-alpine
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: /test_specflow/Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: dotnet test Zilon.Core/Zilon.Core.Specs/Zilon.Core.Specs.csproj -c Release
      - store_test_results:
          path: TestResult.xml
  test_mass_sector_generator:
    working_directory: /test_mass_sector_generator
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.1-alpine
    environment:
      ZILON_LIV_SCHEME_CATALOG: /test_mass_sector_generator/Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run:
          name: Mass Launcher
          command: chmod +x .circleci/sector_mass_generator.sh && .circleci/sector_mass_generator.sh
      - store_artifacts:
          path: /test_mass_sector_generator/maps
  bench_move:
    working_directory: /bench_move
    docker:
      - image: mono:6.0.0.313
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: ./Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: nuget restore Zilon.Core/Zilon.Core.Benchmarks.Move/Zilon.Core.Benchmarks.Move.csproj -SolutionDirectory ./Zilon.Core
      - run: msbuild Zilon.Core/Zilon.Core.Benchmarks.Move/Zilon.Core.Benchmarks.Move.csproj /t:Restore /p:Configuration=Release
      - run: msbuild Zilon.Core/Zilon.Core.Benchmarks.Move/Zilon.Core.Benchmarks.Move.csproj /t:Build /p:Configuration=Release
      - run: chmod u+x /bench_move/Zilon.Core/Zilon.Core.Benchmarks.Move/bin/Release/Zilon.Core.Benchmarks.Move.exe
      - run: mono --debug /bench_move/Zilon.Core/Zilon.Core.Benchmarks.Move/bin/Release/Zilon.Core.Benchmarks.Move.exe iteration_Count=1000 buildNumber=123 artifact_path="bench_move/dotnetbenchmark-reports"
  bench_move_netcore:
    working_directory: /bench_move_netcore
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: ./Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: dotnet run --project /bench_move_netcore/Zilon.Core/Zilon.Core.Benchmarks.NetCore.Move/Zilon.Core.Benchmarks.NetCore.Move.csproj -c Release -- --filter * --runtimes Core --allStats true
  bench_create_sector:
    working_directory: /bench_create_sector
    docker:
      - image: mono:6.0.0.313
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: ./Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: nuget restore Zilon.Core/Zilon.Core.Benchmarks.CreateSector/Zilon.Core.Benchmarks.CreateSector.csproj -SolutionDirectory ./Zilon.Core
      - run: msbuild Zilon.Core/Zilon.Core.Benchmarks.CreateSector/Zilon.Core.Benchmarks.CreateSector.csproj /t:Restore /p:Configuration=Release
      - run: msbuild Zilon.Core/Zilon.Core.Benchmarks.CreateSector/Zilon.Core.Benchmarks.CreateSector.csproj /t:Build /p:Configuration=Release
      - run: chmod u+x /bench_create_sector/Zilon.Core/Zilon.Core.Benchmarks.CreateSector/bin/Release/Zilon.Core.Benchmarks.CreateSector.exe
      - run: mono --debug /bench_create_sector/Zilon.Core/Zilon.Core.Benchmarks.CreateSector/bin/Release/Zilon.Core.Benchmarks.CreateSector.exe iteration_Count=1000 buildNumber=123 artifact_path="bench_create_sector/dotnetbenchmark-reports"
  bench_create_globe:
    working_directory: /bench_create_globe
    docker:
      - image: mono:6.0.0.313
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: ./Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: nuget restore Zilon.Core/Zilon.Core.Benchmarks.CreateGlobe/Zilon.Core.Benchmarks.CreateGlobe.csproj -SolutionDirectory ./Zilon.Core
      - run: msbuild Zilon.Core/Zilon.Core.Benchmarks.CreateGlobe/Zilon.Core.Benchmarks.CreateGlobe.csproj /t:Restore /p:Configuration=Release
      - run: msbuild Zilon.Core/Zilon.Core.Benchmarks.CreateGlobe/Zilon.Core.Benchmarks.CreateGlobe.csproj /t:Build /p:Configuration=Release
      - run: chmod u+x /bench_create_globe/Zilon.Core/Zilon.Core.Benchmarks.CreateGlobe/bin/Release/Zilon.Core.Benchmarks.CreateGlobe.exe
      - run: mono --debug /bench_create_globe/Zilon.Core/Zilon.Core.Benchmarks.CreateGlobe/bin/Release/Zilon.Core.Benchmarks.CreateGlobe.exe iteration_Count=1000 buildNumber=123 artifact_path="bench_create_globe/dotnetbenchmark-reports"
orbs:
  sonarcloud: ksmc/sonarcloud-dotnet@0.0.9
workflows:
  version: 2
  commit:
    jobs:
      - build
      - sonar-scan:
          context: SonarCloud
      - test_45:
          requires:
            - build
      - test_di:
          requires:
            - build
      - test_players:
          requires:
            - build
# Спеки на неработают под netcore3.1
# Разобраться и восстановить позже
      - test_specflow:
          requires:
            - build
      - test_bots:
          requires:
            - build
            - test_45
            - test_di
# Спеки на неработают под netcore3.1
# Разобраться и восстановить позже
            - test_specflow
  release:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /release.*/
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - beta
    jobs:
      - build
      - test_45:
          requires:
            - build
      - test_di:
          requires:
            - build
      - test_players:
          requires:
            - build
# Спеки на неработают под netcore3.1
# Разобраться и восстановить позже
#      - test_specflow:
#          requires:
#            - build
      - test_bots:
          requires:
            - build
            - test_45
            - test_di
# Спеки на неработают под netcore3.1
# Разобраться и восстановить позже
#            - test_specflow
# Отключено, потому что после портирования на netcore не работает.
#      - test_mass_sector_generator:
#           requires:
#            - build
#            - test_45
#            - test_di
#            - test_specflow
# Спеки на неработают под netcore3.1
# Разобраться и восстановить позже
#            - test_specflow
#      - build_Linux_x32:
#          requires:
#            - build
#            - test_45
# Не работает и не собирается, потому что бенчи написаны под net46,
# а тестируемые библиотеки теперь netstandard20
# Раскомментировать, когда будет восстановлена сборка.
#      - bench_move:
#          requires:
#            - build_Win_x64
#            - build_Win_x32
#            - build_Linux_x64
#            - build_MacOS_Universal
#      - bench_create_sector:
#          requires:
#            - build_Win_x64
#            - build_Win_x32
#            - build_Linux_x64
#            - build_MacOS_Universal
#      - bench_create_globe:
#          requires:
#            - build_Win_x64
#            - build_Win_x32
#            - build_Linux_x64
#            - build_MacOS_Universal